{"version":3,"sources":["../../src/plugin/__tests__/index-test.js"],"names":["Hapi","require","createStore","clientRoutes","badClientRoutes","redirectClientRoutes","layout","badLayout","options","routes","config","honeybadger","assets","styles","scripts","HapiReactRedux","describe","it","done","server","Server","connection","register","err","expect","toBeTruthy","hapiReactRedux","toBeUndefined","route","method","path","handler","request","reply","hapiReactReduxRender","inject","url","res","result","toContain","hapiReactReduxHandler","test","pre","assign","statusCode","toBe"],"mappings":"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","file":"index-test.js","sourcesContent":["'use strict'\nconst Hapi = require('hapi')\nconst createStore = require('fixtures/createStore')\nconst clientRoutes = require('fixtures/routes')\nconst badClientRoutes = require('fixtures/bad-routes')\nconst redirectClientRoutes = require('fixtures/redirect-routes')\nconst layout = require('fixtures/layout')\nconst badLayout = require('fixtures/bad-layout')\n\nconst options = {\n  routes : clientRoutes,\n  layout : layout,\n  config : {\n    honeybadger: '1234'\n  },\n  assets : {\n    styles: {\n    },\n    scripts: {\n    }\n  },\n  createStore\n}\n\nconst HapiReactRedux = require('plugin/index')\n\ndescribe('hapi react redux plugin', () => {\n  it('can be registered', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      expect(server).toBeTruthy()\n      expect(server.hapiReactRedux).toBeTruthy()\n      expect(err).toBeUndefined()\n      done()\n    })\n  })\n\n  it('can set options with the hapiReactRedux method', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactReduxRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/?q=test'\n      }, (res) => {\n        expect(res.result).toContain('home')\n        done()\n      })\n    })\n  })\n\n  it('can have a handler call the hapiReactReduxRender method on reply', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactReduxRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('home')\n        done()\n      })\n    })\n  })\n\n  it('can use the server handler instead of calling the method directly', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler: { hapiReactReduxHandler: {} }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('home')\n        done()\n      })\n    })\n  })\n\n  it('can collect data from fetch methods on route handlers to have in the rendered output via route-resolver', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler: { hapiReactReduxHandler: {} }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('test-todo-redux')\n        done()\n      })\n    })\n  })\n\n  it('can use data sent to the hapiReactReduxRender method on reply', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactReduxRender({\n            test: 'the test'\n          })\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('>the test</p>')\n        done()\n      })\n    })\n  })\n\n  it('can use data from route prereqs', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        config: {\n          pre: [\n            { method: (request, reply) => { return reply('preTest') }, assign: 'preTest' }\n          ]\n        },\n        handler(request, reply) {\n          return reply.hapiReactReduxRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('>preTest</p>')\n        done()\n      })\n    })\n  })\n\n  it('can use data from config', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactReduxRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('>1234</p>')\n        done()\n      })\n    })\n  })\n\n  it('will redirect if RR has a redirect route in it', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = redirectClientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/{path*}',\n        handler(request, reply) {\n          return reply.hapiReactReduxRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/about'\n      }, (res) => {\n        expect(res.statusCode).toBe(301)\n        done()\n      })\n    })\n  })\n\n  it('will throw error if layout/components are not valid', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = badLayout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactReduxRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.statusCode).toBe(500)\n        done()\n      })\n    })\n  })\n\n  it('will 404 if not found', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/{path*}',\n        handler(request, reply) {\n          return reply.hapiReactReduxRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/notfound'\n      }, (res) => {\n        expect(res.statusCode).toBe(404)\n        done()\n      })\n    })\n  })\n\n  it('will throw error if react router throws an err', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactRedux, (err) => {\n      options.layout = layout\n      options.routes = badClientRoutes\n      server.hapiReactRedux(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactReduxRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.statusCode).toBe(500)\n        done()\n      })\n    })\n  })\n\n})\n"]}