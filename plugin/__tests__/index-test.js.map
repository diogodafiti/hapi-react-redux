{"version":3,"sources":["../../src/plugin/__tests__/index-test.js"],"names":["Hapi","require","alt","clientRoutes","badClientRoutes","redirectClientRoutes","layout","badLayout","options","routes","config","honeybadger","assets","styles","scripts","HapiReactAlt","describe","it","done","server","Server","connection","register","err","expect","toBeTruthy","hapiReactAlt","toBeUndefined","route","method","path","handler","request","reply","hapiReactAltRender","inject","url","res","result","toContain","hapiReactAltHandler","test","pre","assign","statusCode","toBe"],"mappings":"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","file":"index-test.js","sourcesContent":["'use strict'\nconst Hapi = require('hapi')\n\nconst alt = require('fixtures/alt')\nconst clientRoutes = require('fixtures/routes')\nconst badClientRoutes = require('fixtures/bad-routes')\nconst redirectClientRoutes = require('fixtures/redirect-routes')\nconst layout = require('fixtures/layout')\nconst badLayout = require('fixtures/bad-layout')\n\nconst options = {\n  routes : clientRoutes,\n  layout : layout,\n  alt    : alt,\n  config : {\n    honeybadger: '1234'\n  },\n  assets : {\n    styles: {\n    },\n    scripts: {\n    }\n  }\n}\n\nconst HapiReactAlt = require('plugin/index')\n\ndescribe('hapi react alt plugin', () => {\n  it('can be registered', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      expect(server).toBeTruthy()\n      expect(server.hapiReactAlt).toBeTruthy()\n      expect(err).toBeUndefined()\n      done()\n    })\n  })\n\n  it('can set options with the hapiReactAlt method', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactAltRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/?q=test'\n      }, (res) => {\n        expect(res.result).toContain('home')\n        expect(res.result).toContain('123')\n        done()\n      })\n    })\n  })\n\n  it('can have a handler call the hapiReactAltRender method on reply', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactAltRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('home')\n        expect(res.result).toContain('123')\n        done()\n      })\n    })\n  })\n\n  it('can use the server handler instead of calling the method directly', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler: { hapiReactAltHandler: {} }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('home')\n        expect(res.result).toContain('123')\n        done()\n      })\n    })\n  })\n\n  it('can collect data from fetch methods on route handlers to have in the rendered output via route-resolver', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler: { hapiReactAltHandler: {} }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('testfetchValue')\n        done()\n      })\n    })\n  })\n\n  it('can use data send to the hapiReactAltRender method on reply', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactAltRender({\n            test: 'the test'\n          })\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('the test')\n        done()\n      })\n    })\n  })\n\n  it('can use data sent to the hapiReactAltRender method on reply', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactAltRender({\n            test: 'the test'\n          })\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('the test')\n        done()\n      })\n    })\n  })\n\n  it('can use data from route prereqs', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        config: {\n          pre: [\n            { method: (request, reply) => { return reply('preTest') }, assign: 'preTest' }\n          ]\n        },\n        handler(request, reply) {\n          return reply.hapiReactAltRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.result).toContain('preTest')\n        done()\n      })\n    })\n  })\n\n  it('will redirect if RR has a redirect route in it', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = redirectClientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/{path*}',\n        handler(request, reply) {\n          return reply.hapiReactAltRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/about'\n      }, (res) => {\n        expect(res.statusCode).toBe(301)\n        done()\n      })\n    })\n  })\n\n  it('will throw error if layout/components are not valid', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = badLayout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactAltRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.statusCode).toBe(500)\n        done()\n      })\n    })\n  })\n\n  it('will 404 if not found', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = clientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/{path*}',\n        handler(request, reply) {\n          return reply.hapiReactAltRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/notfound'\n      }, (res) => {\n        expect(res.statusCode).toBe(404)\n        done()\n      })\n    })\n  })\n\n  it('will throw error if react router throws an err', (done) => {\n    const server = new Hapi.Server()\n    server.connection()\n    server.register(HapiReactAlt, (err) => {\n      options.layout = layout\n      options.routes = badClientRoutes\n      server.hapiReactAlt(options)\n      server.route({\n        method: 'GET',\n        path: '/',\n        handler(request, reply) {\n          return reply.hapiReactAltRender()\n        }\n      })\n      server.inject({\n        method: 'GET',\n        url: '/'\n      }, (res) => {\n        expect(res.statusCode).toBe(500)\n        done()\n      })\n    })\n  })\n\n})\n"]}