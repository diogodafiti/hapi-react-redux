{"version":3,"sources":["../src/plugin/index.js"],"names":["hapiReactAltPlugin","server","options","next","decorate","assert","realm","plugins","universalReactAlt","settings","context","routes","Layout","layout","assets","config","authStore","alt","pre","request","auth","stores","bootstrap","JSON","stringify","iso","location","raw","req","url","err","redirect","props","response","pathname","search","code","then","rootHtml","e","add","flush","render","notFound","handler","route","reply","hapiReactAltRender","attributes","name","module","exports","register"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { match, RouterContext } from 'react-router'\nimport Iso from 'iso'\nimport Hoek from 'hoek'\nimport routeResovler from 'route-resolver'\nimport Boom from 'boom'\n\nimport UniversalProvider from './universal-provider'\n\nfunction hapiReactAltPlugin(server, options, next) {\n\n  server.decorate('server', 'hapiReactAlt', function(options) {\n\n    Hoek.assert(options, 'Missing options')\n    this.realm.plugins.universalReactAlt = this.realm.plugins.universalReactAlt || {}\n    Hoek.assert(!this.realm.plugins.universalReactAlt.settings, 'Cannot set universalReactAlt settings more than once')\n    this.realm.plugins.universalReactAlt.settings = options\n\n  })\n\n  server.decorate('reply', 'hapiReactAltRender', function(context) {\n\n    const realm = this.realm.plugins.universalReactAlt\n    Hoek.assert(realm.settings, 'Cannot render app without settings')\n\n    const routes = realm.settings.routes\n    const Layout = realm.settings.layout\n    const assets = realm.settings.assets\n    const config = realm.settings.config\n    const authStore = realm.settings.authStore//string name of the store\n    const alt = realm.settings.alt\n\n    // any extra data\n    const pre = this.request.pre\n\n    // is there a user?\n    const auth = this.request.auth\n    //bootstrap the user into the authStore option for later\n    if (auth && alt.stores[authStore]) {\n      alt.bootstrap(JSON.stringify({ [authStore]: auth}))\n    }\n\n    const iso = new Iso()\n\n    match({ routes, location: this.request.raw.req.url }, (err, redirect, props) => {\n      if (err) {\n        return this.response(err)\n      } else if (redirect) {\n        this.redirect(redirect.pathname + redirect.search).code(301)\n      } else if (props) {\n        routeResovler(props, false)\n          .then(() => {\n            let rootHtml = null\n            let layout = null\n            try {\n              rootHtml = renderToString(\n                <UniversalProvider pre={pre} serverContext={context} config={config} >\n                  <RouterContext {...props} />\n                </UniversalProvider>\n              )\n            } catch (e) {\n              if (e) return this.response(e)\n            }\n            iso.add(rootHtml, {\n              alt: alt.flush(),\n              pre,\n              context,\n              config,\n            })\n            try {\n              layout = renderToString(<Layout assets={assets} config={config} content={iso.render()} />)\n            } catch (e) {\n              if (e) return this.response(e)\n            }\n            this.response(`<!doctype html>\\n${layout}`)\n          })\n      } else {\n      // no errors, no redirect, we just didn't match anything\n        this.response(Boom.notFound(`Unable to find maching route for ${this.request.raw.req.url}`))\n      }\n    })\n\n  })\n\n\n  server.handler('hapiReactAltHandler', function(route, options) {\n    return function(request, reply) {\n      reply.hapiReactAltRender()\n    }\n  })\n\n  next()\n}\n\nhapiReactAltPlugin.attributes = {\n  name: 'hapi-react-alt'\n}\n\nmodule.exports = {\n  register: hapiReactAltPlugin\n}\n"]}