{"version":3,"sources":["../../src/reducers/__tests__/config-test.js"],"names":["describe","it","expect","newRelic","toEqual","payload","segment","type"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,gBAAT,EAA2B,YAAM;AAC/BC,KAAG,qDAAH,EAA0D,YAAM;AAC9DC,WAAO,sBAAO;AACZC,gBAAU;AADE,KAAP,EAEJ,EAFI,CAAP,EAGCC,OAHD,CAGS;AACPD,gBAAU;AADH,KAHT;AAMD,GAPD;;AASAF,KAAG,kDAAH,EAAuD,YAAM;AAC3DC,WAAO,sBAAO;AACZC,gBAAU;AADE,KAAP,EAEJ;AACDE,eAAS;AACPC,iBAAS;AADF,OADR;AAIDC,YAAM;AAJL,KAFI,CAAP,EAQCH,OARD,CAQS;AACPD,gBAAU,GADH;AAEPG,eAAS;AAFF,KART;AAYD,GAbD;AAeD,CAzBD","file":"config-test.js","sourcesContent":["import config from '../config'\n\ndescribe('config reducer', () => {\n  it('will return default state if no action type matches', () => {\n    expect(config({\n      newRelic: 123\n    }, {}))\n    .toEqual({\n      newRelic: 123\n    })\n  })\n\n  it('will set a new value if the action is dispatched', () => {\n    expect(config({\n      newRelic: 123\n    }, {\n      payload: {\n        segment: 456,\n      },\n      type: 'SET_CONFIG'\n    }))\n    .toEqual({\n      newRelic: 123,\n      segment: 456\n    })\n  })\n\n})\n"]}